// This script is designed to test the solidity smart contract - ArtSuppyChain.sol -- and the various functions within

// Using truffle-assertions to test emitted events
const truffleAssert = require('truffle-assertions')

// Assign the compiled smart contract artifact
const ArtSupplyChain = artifacts.require('ArtSupplyChain')

// To work with Big Numbers
const BN = web3.utils.BN
const toBN = web3.utils.toBN

contract('ArtSupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var artworkID = 1
    const contractOwner = accounts[0]
    const artworkOwnerID = accounts[1]
    const originArtistID = accounts[1]
    const originArtistName = "Dave Weindorf Ternisky"
    const originArtistInfo = "Abstract expressionist painter"
    const originArtistLocation = "Michigan, United States"
    const artworkTitle = "Clattering Teeth"
    const artworkYear = "2018"
    const artworkMedium = "Acrylic enamel and watercolor on canvas"
    const artworkStyle = "Abstract expressionism"
    const artistNotes = "Thinking of dentists and teeth"
    const artworkPrice = web3.utils.toWei('.000000000000000315', 'ether')
    var artworkState = 0
    const artAdopterID = accounts[2]
    const shipperID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    // Test: createArtwork()
    it("Testing smart contract function createArtwork() that allows an artist to create and define a new piece of art", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()

        // Mark an artwork as Created by calling function createArtwork()
        const result = await artSupplyChain.createArtwork(artworkTitle, artworkYear, artworkMedium, artworkStyle, originArtistID, originArtistName, originArtistInfo, originArtistLocation, artistNotes, {from: originArtistID})

        assert.equal(result.logs[0].args.artworkID, 1)
        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Created')
    })
    
    // Test: fetchArtistDetails()
    it("Testing smart contract function fetchArtistDetails() that allows anyone to fetch artist details for an artwork from blockchain", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()

        const resultArtistDetails = await artSupplyChain.fetchArtistDetails.call(artworkID)

        // Verify the artist details result set
        assert.equal(resultArtistDetails[0], originArtistID, 'Invalid origin artistID')
        assert.equal(resultArtistDetails[1], originArtistName, 'Invalid origin artist name')
        assert.equal(resultArtistDetails[2], originArtistInfo, 'Invalid origin artist info')
        assert.equal(resultArtistDetails[3], originArtistLocation, 'Invalid origin artist location')
    })

    // Test: fetchArtworkDetails()
    it("Testing smart contract function fetchArtworkDetails() that allows anyone to fetch artwork details from blockchain", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()

        const resultArtworkDetails = await artSupplyChain.fetchArtworkDetails.call(artworkID)

        assert.equal(parseInt(resultArtworkDetails[0]), artworkID, 'Invalid artwork ID')
        assert.equal(resultArtworkDetails[1], artworkOwnerID, 'Invalid artwork owner')
        assert.equal(resultArtworkDetails[2], artworkTitle, 'Invalid artwork title')
        assert.equal(resultArtworkDetails[3], artworkYear, 'Invalid artwork year')
        assert.equal(resultArtworkDetails[4], artworkStyle, 'Invalid artwork style')
        assert.equal(resultArtworkDetails[6], artistNotes, 'Invalid artist notes')
        assert.equal(resultArtworkDetails[7], 0, 'Invalid artwork state')
    })


    // Test: frameArtwork()
    it("Testing smart contract function frameArtwork() that allows an artist to frame the artwork", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Framed'
        const result = await artSupplyChain.frameArtwork(artworkID, {from: originArtistID}) 
        const state = await artSupplyChain.fetchArtworkState.call(artworkID)
        
        assert.equal(state, 1, 'State is not Framed')
        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Framed')
    })
    
    // Test: adoptableArtwork()
    it("Testing smart contract function adoptableArtwork() that allows an artist to put an artwork up for adoption", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Adoptable'
        const result = await artSupplyChain.adoptableArtwork(artworkID, parseInt(artworkPrice), {from: originArtistID})
        const state = await artSupplyChain.fetchArtworkState.call(artworkID)
        const price = await artSupplyChain.fetchArtworkPrice.call(artworkID)
        
        assert.equal(state, 2, 'State is not Adoptable')
        assert.equal(price, 315, 'Artwork price not set correctly')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Adoptable')
    })

    // Test: adoptArtwork()
    it("Testing smart contract function adoptArtwork() that allows a consumer to adopt an artwork", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Adopted'
        const price = await artSupplyChain.fetchArtworkPrice.call(artworkID)

        // Get adopter's before balance
        const balanceBefore = await web3.eth.getBalance(artAdopterID)

        const result = await artSupplyChain.adoptArtwork(artworkID, artAdopterID, {from: artAdopterID, value: artworkPrice + 250, gasPrice: 0});

        // Get adopter's after balance
        const balanceAfter = await web3.eth.getBalance(artAdopterID)

        // Expected balance = before balance - artwork price
        const expectedBalance = toBN(balanceBefore).sub(new BN(artworkPrice))

        const resultArtworkDetails = await artSupplyChain.fetchArtworkDetails.call(artworkID)

        // Verify the artwork owner, state, and adopter ID
        assert.equal(resultArtworkDetails[1], artAdopterID, 'Ownership not transferred to art adopter ID')
        assert.equal(resultArtworkDetails[7], 3, 'State is not Adopted')
        assert.equal(resultArtworkDetails[8], artAdopterID, 'Invalid artwork adopter ID')
        assert.equal(toBN(balanceAfter).toString(), expectedBalance.toString(), 'Excess not transferred back to art adopter ID')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Adopted')
    })

    // Test: packArtwork()
    it("Testing smart contract function packArtwork() that allows an artist to pack an artwork", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Packed'
        const result = await artSupplyChain.packArtwork(artworkID, {from: originArtistID})

        const state = await artSupplyChain.fetchArtworkState(artworkID)
        
        assert.equal(state, 4, 'State is not Packed')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Packed')
    })        

    // Test: pickUpArtwork()
    it("Testing smart contract function pickUpArtwork() that allows a shipper to pick-up the artwork", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'PickedUp'
        const result = await artSupplyChain.pickUpArtwork(artworkID, {from: shipperID});    

        // Retrieve the newly-saved artwork details from the blockchain
        const resultArtworkDetails = await artSupplyChain.fetchArtworkDetails.call(artworkID)

        // Verify the artwork owner, state, and shipper ID
        assert.equal(resultArtworkDetails[1], shipperID, 'Ownership not transferred to shipper')
        assert.equal(resultArtworkDetails[7], 5, 'State is not PickedUp')
        assert.equal(resultArtworkDetails[9], shipperID, 'Invalid shipper ID')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'PickedUp')
    })    

    // Test: shipArtwork()
    it("Testing smart contract function shipArtwork() that allows a shipper to ship the artwork", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Shipped'
        const result = await artSupplyChain.shipArtwork(artworkID, {from: shipperID})

        // Retrieve the newly-saved artwork details from the blockchain
        const state = await artSupplyChain.fetchArtworkState.call(artworkID)
        
        assert.equal(state, 6, 'State is not Shipped')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Shipped')
    })    

    // Test: deliverArtwork()
    it("Testing smart contract function deliverArtwork() that allows a shipper to mark the artwork delivered", async() => {
        const artSupplyChain = await ArtSupplyChain.deployed()
    
        // State gets changed to 'Delivered'
        const result = await artSupplyChain.deliverArtwork(artworkID, {from: shipperID})  

        // Retrieve the newly-saved artwork details from the blockchain
        const resultArtworkDetails = await artSupplyChain.fetchArtworkDetails.call(artworkID)

        // Verify the artwork owner, state, and art adopter ID
        assert.equal(resultArtworkDetails[1], artAdopterID, 'Ownership not transferred to art adopter')
        assert.equal(resultArtworkDetails[7], 7, 'State is not Delivered')

        // Verify event emitted
        truffleAssert.eventEmitted(result, 'Delivered')
    })   
});

